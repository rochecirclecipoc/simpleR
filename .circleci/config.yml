
version: 2.1
defaults-pre-system: &defaults-pre-system
  - run:
      name: "install system packages"
      command: |
        apt-get update
        apt-get install --no-install-recommends -y wget curl
        apt-get clean
        wget --version
        curl --version

defaults-pre-pkg: &defaults-pre-pkg
  - run:
      name: "install R packages from CRAN"
      command: |
        R --vanilla \<<- 'EOF'
        options(repos = c(CRAN = "https://cloud.r-project.org"))
        .libPaths()
        install.packages(
            c("testthat", "yaml")
          )
        EOF
        echo "information about R-packages"
        R --vanilla \<<- 'EOF'
        installed.packages() -> d1
        print('testthat')
        print(d1[rownames(d1) == 'testthat', c("Version", "LibPath")])
        print('yaml')
        print(d1[rownames(d1) == 'yaml', c("Version", "LibPath")])
        EOF
        echo 'verify system installation step'
        wget --version
        curl --version

executors:
  test-node:
    docker:
      - image: rocker/tidyverse:3.6.3

jobs:
  build_check_install:
    executor: test-node
    steps:
      - checkout
      - run:
          name: "Build R package"
          command: |
            R CMD build .
            echo "export PKG=$(echo *.tar.gz)" >> $BASH_ENV
      - run:
          name: "Check R package"
          command: |
            R CMD check --no-manual ${PKG}
            result=$(tail -1 ${CIRCLE_PROJECT_REPONAME}.Rcheck/00check.log)
            [[ $result = Status:* ]] || echo "could not get Status line"; set -o errexit
            [[ $result = *"Error"* ]] && echo "checks result in errors"; set -o errexit
      - run:
          name: "Install R package"
          command: R CMD INSTALL ${PKG}
      - run:
          name: "Prepare artifacts"
          command: mv ${CIRCLE_PROJECT_REPONAME}.Rcheck rpackage.Rcheck
      - store_artifacts:
          path: "rpackage.Rcheck/00check.log"
          destination: 00check.log
      - store_test_results:
          path: "rpackage.Rcheck/tests"
      - persist_to_workspace:
          root: ./
          paths:
            - "*.tar.gz"

  roxygen:
    executor: test-node
    steps:
      - checkout
      - run:
          name: "check if manuals are upto date with roxygen comments"
          command: |
            R -e "roxygen2::roxygenize('.', roclets = c('rd', 'collate', 'namespace'))"
            if [[ -z $(git status -s) ]]
            then
              echo "manuals are not upto date with roxygen comments"
              echo "please rerun roxygen2::roxygenize('.', roclets = c('rd', 'collate', 'namespace'))"
              set -o errexit
            else
              echo "manuals are upto date with roxygen comments"
            fi

  pkgdown:
    executor: test-node
    steps:
      - checkout
      - run:
          name: "create pkgdown website"
          command: R -e 'pkgdown::build_site(".", devel = FALSE)'
      - store_artifacts:
          path: ./docs
          destination: pkgdown

workflows:
  version: 2.1
  Rworkflow:
    jobs: 
      - roxygen:
          pre-steps:
            <<: *defaults-pre-system
            <<: *defaults-pre-pkg
      - pkgdown:
          requires:
            - roxygen
      - build_check_install:
          requires:
            - roxygen
